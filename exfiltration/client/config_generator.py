#!/usr/bin/env python3
"""
DoH Evasion Configuration Generator

Outil pour cr√©er, modifier et tester des configurations d'√©vasion DoH
pour les tests de recherche en s√©curit√©.
"""

import argparse
import json
import os
import sys
import time
from pathlib import Path
from typing import Dict, Any

def create_evasion_config():
    """Interface interactive pour cr√©er une configuration d'√©vasion"""
    print("üîß DoH Evasion Configuration Generator")
    print("=" * 50)
    
    config = {
        "name": "",
        "description": "",
        "exfiltration_config": {},
        "test_files": [],
        "detection_expected": False,
        "notes": ""
    }
    
    # Informations de base
    config["name"] = input("üìù Nom de la configuration: ").strip()
    config["description"] = input("üìã Description: ").strip()
    
    # Configuration d'exfiltration
    print("\n‚öôÔ∏è Configuration d'exfiltration:")
    
    # Serveur et domaine
    config["exfiltration_config"]["doh_server"] = input("üåê Serveur DoH [https://doh.local/dns-query]: ").strip() or "https://doh.local/dns-query"
    config["exfiltration_config"]["target_domain"] = input("üéØ Domaine cible [exfill.local]: ").strip() or "exfill.local"
    
    # Taille des chunks
    chunk_size = input("üì¶ Taille des chunks [30]: ").strip()
    config["exfiltration_config"]["chunk_size"] = int(chunk_size) if chunk_size else 30
    
    # Encodage
    print("üî¢ Encodage disponible: base64, hex, base32, custom")
    encoding = input("   S√©lection [base64]: ").strip() or "base64"
    config["exfiltration_config"]["encoding"] = encoding
    
    # Pattern de timing
    print("‚è±Ô∏è Patterns de timing: regular, random, burst, stealth")
    timing = input("   S√©lection [regular]: ").strip() or "regular"
    config["exfiltration_config"]["timing_pattern"] = timing
    
    # D√©lai de base
    delay = input("‚è≤Ô∏è D√©lai de base en secondes [0.2]: ").strip()
    config["exfiltration_config"]["base_delay"] = float(delay) if delay else 0.2
    
    # Options d'√©vasion
    print("\nüïµÔ∏è Options d'√©vasion:")
    config["exfiltration_config"]["compression"] = input("üóúÔ∏è Compression [y/N]: ").lower().startswith('y')
    config["exfiltration_config"]["encryption"] = input("üîê Chiffrement [y/N]: ").lower().startswith('y')
    
    if config["exfiltration_config"]["encryption"]:
        encryption_key = input("üîë Cl√© de chiffrement: ").strip()
        config["exfiltration_config"]["encryption_key"] = encryption_key or "default_key"
    
    config["exfiltration_config"]["subdomain_randomization"] = input("üé≤ Randomisation sous-domaines [Y/n]: ").lower() != 'n'
    config["exfiltration_config"]["padding"] = input("üìè Padding [y/N]: ").lower().startswith('y')
    
    # Rotation de domaines
    domain_rotation = input("üîÑ Rotation de domaines [y/N]: ").lower().startswith('y')
    config["exfiltration_config"]["domain_rotation"] = domain_rotation
    
    if domain_rotation:
        backup_domains = input("üîó Domaines de backup (s√©par√©s par virgules): ").strip()
        if backup_domains:
            config["exfiltration_config"]["backup_domains"] = [d.strip() for d in backup_domains.split(',')]
        else:
            config["exfiltration_config"]["backup_domains"] = []
    
    # Param√®tres avanc√©s pour timing sp√©ciaux
    if timing == "random":
        variance = input("üìä Variance de d√©lai [0.1]: ").strip()
        config["exfiltration_config"]["delay_variance"] = float(variance) if variance else 0.1
    elif timing == "burst":
        burst_size = input("üí• Taille des rafales [5]: ").strip()
        config["exfiltration_config"]["burst_size"] = int(burst_size) if burst_size else 5
        burst_delay = input("‚è≥ D√©lai entre rafales [2.0]: ").strip()
        config["exfiltration_config"]["burst_delay"] = float(burst_delay) if burst_delay else 2.0
    elif timing == "stealth":
        variance = input("üìä Variance de d√©lai pour furtivit√© [1.0]: ").strip()
        config["exfiltration_config"]["delay_variance"] = float(variance) if variance else 1.0
    
    # M√©tadonn√©es
    print("\nüìã M√©tadonn√©es:")
    test_files = input("üìÅ Fichiers de test (s√©par√©s par virgules): ").strip()
    if test_files:
        config["test_files"] = [f.strip() for f in test_files.split(',')]
    
    config["detection_expected"] = input("üö® D√©tection attendue [y/N]: ").lower().startswith('y')
    config["notes"] = input("üìù Notes de recherche: ").strip()
    
    return config

def save_config(config: Dict[str, Any], filename: str = None) -> str:
    """Sauvegarde une configuration dans un fichier JSON"""
    if not filename:
        safe_name = config["name"].lower().replace(" ", "_").replace("-", "_")
        filename = f"{safe_name}.json"
    
    config_dir = Path("test_configs")
    config_dir.mkdir(exist_ok=True)
    
    filepath = config_dir / filename
    
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    return str(filepath)

def load_config(filename: str) -> Dict[str, Any]:
    """Charge une configuration depuis un fichier JSON"""
    config_path = Path(filename)
    if not config_path.exists():
        config_path = Path("test_configs") / filename
        if not config_path.exists():
            raise FileNotFoundError(f"Configuration not found: {filename}")
    
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def list_configs():
    """Liste toutes les configurations disponibles"""
    config_dir = Path("test_configs")
    if not config_dir.exists():
        print("üìÅ Aucune configuration trouv√©e")
        return
    
    configs = list(config_dir.glob("*.json"))
    if not configs:
        print("üìÅ Aucune configuration trouv√©e")
        return
    
    print(f"üìã Configurations disponibles ({len(configs)}):")
    print("=" * 50)
    
    for config_file in sorted(configs):
        try:
            config = load_config(config_file)
            detection = "üî¥ High" if config.get("detection_expected", False) else "üü¢ Low"
            
            exfil_config = config.get("exfiltration_config", {})
            chunk_size = exfil_config.get("chunk_size", "?")
            encoding = exfil_config.get("encoding", "?")
            timing = exfil_config.get("timing_pattern", "?")
            
            print(f"üìÑ {config_file.stem}")
            print(f"   üìù {config.get('description', 'No description')}")
            print(f"   ‚öôÔ∏è Chunks: {chunk_size}, Encoding: {encoding}, Timing: {timing}")
            print(f"   üéØ Detection: {detection}")
            if config.get("notes"):
                print(f"   üìã Notes: {config['notes']}")
            print()
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement de {config_file}: {e}")

def create_template_configs():
    """Cr√©e des configurations de template pour diff√©rents sc√©narios"""
    templates = [
        {
            "name": "Quick Test",
            "description": "Configuration rapide pour tests de base",
            "exfiltration_config": {
                "doh_server": "https://doh.local/dns-query",
                "target_domain": "exfill.local",
                "chunk_size": 30,
                "encoding": "base64",
                "timing_pattern": "regular",
                "base_delay": 0.3,
                "compression": False,
                "encryption": False,
                "subdomain_randomization": True
            },
            "test_files": ["sample.txt"],
            "detection_expected": True,
            "notes": "Configuration de base pour validation rapide"
        },
        {
            "name": "Stealth Research",
            "description": "Configuration furtive pour recherche d'√©vasion",
            "exfiltration_config": {
                "doh_server": "https://doh.local/dns-query",
                "target_domain": "cdn-service.local",
                "chunk_size": 15,
                "encoding": "custom",
                "timing_pattern": "stealth",
                "base_delay": 5.0,
                "delay_variance": 2.0,
                "compression": True,
                "encryption": True,
                "encryption_key": "research_stealth_key",
                "subdomain_randomization": True,
                "padding": True,
                "padding_size": 12,
                "domain_rotation": True,
                "backup_domains": ["api-cache.local", "media-cdn.local"]
            },
            "test_files": ["sensitive_data.json", "credentials.txt"],
            "detection_expected": False,
            "notes": "Techniques d'√©vasion avanc√©es pour contourner la d√©tection ML"
        },
        {
            "name": "Speed Benchmark",
            "description": "Configuration optimis√©e pour vitesse maximale",
            "exfiltration_config": {
                "doh_server": "https://doh.local/dns-query",
                "target_domain": "fast-api.local",
                "chunk_size": 55,
                "encoding": "base64",
                "timing_pattern": "burst",
                "base_delay": 0.001,
                "burst_size": 20,
                "burst_delay": 0.1,
                "compression": True,
                "subdomain_randomization": False,
                "max_retries": 1,
                "retry_delay": 0.05,
                "timeout": 2.0
            },
            "test_files": ["large_file.bin"],
            "detection_expected": True,
            "notes": "Test de vitesse maximale - facilement d√©tectable"
        }
    ]
    
    config_dir = Path("test_configs")
    config_dir.mkdir(exist_ok=True)
    
    created = []
    for template in templates:
        filename = template["name"].lower().replace(" ", "_") + ".json"
        filepath = config_dir / filename
        
        if not filepath.exists():
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(template, f, indent=2, ensure_ascii=False)
            created.append(filename)
    
    if created:
        print(f"‚úÖ Configurations template cr√©√©es: {', '.join(created)}")
    else:
        print("‚ÑπÔ∏è Toutes les configurations template existent d√©j√†")

def test_config(config_file: str, test_file: str = None):
    """Teste une configuration avec un fichier"""
    try:
        config = load_config(config_file)
        print(f"üß™ Test de la configuration: {config['name']}")
        print(f"üìù Description: {config['description']}")
        
        if not test_file:
            # Cr√©er un fichier de test temporaire
            test_file = "temp_test_file.txt"
            with open(test_file, 'w') as f:
                f.write("Test data for DoH exfiltration configuration validation.\n")
                f.write("This file will be used to test the JSON configuration.\n")
                f.write("Configuration: " + config['name'] + "\n")
                f.write("Timestamp: " + str(time.time()) + "\n")
            print(f"üìÅ Fichier de test cr√©√©: {test_file}")
        
        # Utiliser le script de test avec la configuration
        import subprocess
        cmd = [sys.executable, "run_client.py", "--config", config_file, test_file]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Test r√©ussi!")
        else:
            print("‚ùå Test √©chou√©:")
            print(result.stderr)
        
        # Nettoyer le fichier temporaire
        if test_file == "temp_test_file.txt" and os.path.exists(test_file):
            os.remove(test_file)
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")

def main():
    """Fonction principale avec interface en ligne de commande"""
    parser = argparse.ArgumentParser(description='DoH Evasion Configuration Generator')
    parser.add_argument('--create', action='store_true',
                       help='Cr√©er une nouvelle configuration interactivement')
    parser.add_argument('--list', action='store_true',
                       help='Lister toutes les configurations disponibles')
    parser.add_argument('--templates', action='store_true',
                       help='Cr√©er les configurations template')
    parser.add_argument('--test', metavar='CONFIG',
                       help='Tester une configuration')
    parser.add_argument('--file', metavar='FILE',
                       help='Fichier √† utiliser pour le test')
    parser.add_argument('--edit', metavar='CONFIG',
                       help='√âditer une configuration existante')
    
    args = parser.parse_args()
    
    if args.create:
        print("üéØ Cr√©ation d'une nouvelle configuration d'√©vasion DoH")
        config = create_evasion_config()
        filepath = save_config(config)
        print(f"\n‚úÖ Configuration sauvegard√©e: {filepath}")
        
    elif args.list:
        list_configs()
        
    elif args.templates:
        create_template_configs()
        
    elif args.test:
        test_config(args.test, args.file)
        
    elif args.edit:
        try:
            config = load_config(args.edit)
            print(f"üìù √âdition de: {config['name']}")
            print("üí° Appuyez sur Entr√©e pour garder la valeur actuelle")
            
            # Interface d'√©dition simplifi√©e
            new_name = input(f"Nom [{config['name']}]: ").strip()
            if new_name:
                config['name'] = new_name
            
            new_desc = input(f"Description [{config['description']}]: ").strip()
            if new_desc:
                config['description'] = new_desc
            
            # Sauvegarder
            filepath = save_config(config)
            print(f"‚úÖ Configuration mise √† jour: {filepath}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©dition: {e}")
        
    else:
        print("üîß DoH Evasion Configuration Generator")
        print("=" * 40)
        print("üìã Options disponibles:")
        print("  --create      Cr√©er une nouvelle configuration")
        print("  --list        Lister les configurations")
        print("  --templates   Cr√©er les templates de base")
        print("  --test CONFIG Tester une configuration")
        print("  --edit CONFIG √âditer une configuration")
        print()
        print("üí° Exemples d'utilisation:")
        print("  python config_generator.py --create")
        print("  python config_generator.py --list")
        print("  python config_generator.py --test stealth_research.json")
        print("  python config_generator.py --templates")

if __name__ == "__main__":
    main()
